// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: session.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO "session" (
    id,
    username,
    access_token,
    access_expires_at,
    refresh_token,
    refresh_expires_at,
    user_agent,
    client_ip
  )
VALUES(
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, username, access_token, access_expires_at, refresh_token, refresh_expires_at, user_agent, client_ip, is_blocked, "createdAt"
`

type CreateSessionParams struct {
	ID               uuid.UUID      `json:"id"`
	Username         string         `json:"username"`
	AccessToken      string         `json:"access_token"`
	AccessExpiresAt  time.Time      `json:"access_expires_at"`
	RefreshToken     string         `json:"refresh_token"`
	RefreshExpiresAt time.Time      `json:"refresh_expires_at"`
	UserAgent        sql.NullString `json:"user_agent"`
	ClientIp         sql.NullString `json:"client_ip"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.Username,
		arg.AccessToken,
		arg.AccessExpiresAt,
		arg.RefreshToken,
		arg.RefreshExpiresAt,
		arg.UserAgent,
		arg.ClientIp,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.AccessToken,
		&i.AccessExpiresAt,
		&i.RefreshToken,
		&i.RefreshExpiresAt,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM "session"
WHERE "id" = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, username, access_token, access_expires_at, refresh_token, refresh_expires_at, user_agent, client_ip, is_blocked, "createdAt" FROM "session"
WHERE "id" = $1
LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.AccessToken,
		&i.AccessExpiresAt,
		&i.RefreshToken,
		&i.RefreshExpiresAt,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.CreatedAt,
	)
	return i, err
}

const updateSessionAccess = `-- name: UpdateSessionAccess :one
UPDATE "session"
SET
  access_token = $2,
  access_expires_at = $3
WHERE "id" = $1
RETURNING id, username, access_token, access_expires_at, refresh_token, refresh_expires_at, user_agent, client_ip, is_blocked, "createdAt"
`

type UpdateSessionAccessParams struct {
	ID              uuid.UUID `json:"id"`
	AccessToken     string    `json:"access_token"`
	AccessExpiresAt time.Time `json:"access_expires_at"`
}

func (q *Queries) UpdateSessionAccess(ctx context.Context, arg UpdateSessionAccessParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, updateSessionAccess, arg.ID, arg.AccessToken, arg.AccessExpiresAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.AccessToken,
		&i.AccessExpiresAt,
		&i.RefreshToken,
		&i.RefreshExpiresAt,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.CreatedAt,
	)
	return i, err
}
