// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
    username,
    name1,
    name2,
    lastname1,
    lastname2,
    email,
    "hashedPassword"
  )
VALUES($1, $2, $3, $4, $5, $6, $7)
RETURNING username, name1, name2, lastname1, lastname2, email, "hashedPassword", "passwordChangedAt", "createdAt"
`

type CreateUserParams struct {
	Username       string         `json:"username"`
	Name1          string         `json:"name1"`
	Name2          sql.NullString `json:"name2"`
	Lastname1      string         `json:"lastname1"`
	Lastname2      sql.NullString `json:"lastname2"`
	Email          string         `json:"email"`
	HashedPassword string         `json:"hashedPassword"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Name1,
		arg.Name2,
		arg.Lastname1,
		arg.Lastname2,
		arg.Email,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Name1,
		&i.Name2,
		&i.Lastname1,
		&i.Lastname2,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user"
WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const getUser = `-- name: GetUser :one
SELECT username,
  name1,
  name2,
  lastname1,
  lastname2,
  email,
  "hashedPassword",
  "passwordChangedAt",
  "createdAt"
FROM "user"
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Name1,
		&i.Name2,
		&i.Lastname1,
		&i.Lastname2,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT username,
  name1,
  name2,
  lastname1,
  lastname2,
  email,
  "hashedPassword",
  "passwordChangedAt",
  "createdAt"
FROM "user"
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Name1,
		&i.Name2,
		&i.Lastname1,
		&i.Lastname2,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT username,
  name1,
  name2,
  lastname1,
  lastname2,
  email,
  "hashedPassword",
  "passwordChangedAt",
  "createdAt"
FROM "user"
ORDER BY username
LIMIT $1 OFFSET $2
`

type GetUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Username,
			&i.Name1,
			&i.Name2,
			&i.Lastname1,
			&i.Lastname2,
			&i.Email,
			&i.HashedPassword,
			&i.PasswordChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
SET
  name1 = $2,
  name2 = $3,
  lastname1 = $4,
  lastname2 = $5,
  email = $6,
  "hashedPassword" = $7,
  "passwordChangedAt" = $8
WHERE username = $1
RETURNING username, name1, name2, lastname1, lastname2, email, "hashedPassword", "passwordChangedAt", "createdAt"
`

type UpdateUserParams struct {
	Username          string         `json:"username"`
	Name1             string         `json:"name1"`
	Name2             sql.NullString `json:"name2"`
	Lastname1         string         `json:"lastname1"`
	Lastname2         sql.NullString `json:"lastname2"`
	Email             string         `json:"email"`
	HashedPassword    string         `json:"hashedPassword"`
	PasswordChangedAt time.Time      `json:"passwordChangedAt"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Username,
		arg.Name1,
		arg.Name2,
		arg.Lastname1,
		arg.Lastname2,
		arg.Email,
		arg.HashedPassword,
		arg.PasswordChangedAt,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Name1,
		&i.Name2,
		&i.Lastname1,
		&i.Lastname2,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
